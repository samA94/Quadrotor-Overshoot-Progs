import rospy
from geometry_msgs.msg import PoseStamped, TwistStamped
from mavros_msgs.srv import CommandBool, SetMode, StreamRate, WaypointPush
from mavros_msgs.msg import PositionTarget, WaypointList
from sensor_msgs.msg import NavSatFix
import time
import sys
import threading

from fnxnsForRaw import set_Local_Waypoint
from funcSetWaypointList import set_Waypoint
import collectData

rospy.init_node("send_Waypoints")

rospy.wait_for_service("mavros/set_stream_rate")
setRate = rospy.ServiceProxy("mavros/set_stream_rate", StreamRate)

#Set rate at 50 Hz
setRate(0, 50, 1)
rospy.Rate(50.0)

global read_Position, local_Pose, local_Vel, exitFlag

def quad_Command(mode, armVar = False):
    rospy.wait_for_service("mavros/cmd/arming")
    armQuad = rospy.ServiceProxy("mavros/cmd/arming", CommandBool)
    rospy.wait_for_service("mavros/set_mode")
    modeSet = rospy.ServiceProxy("mavros/set_mode", SetMode) 

    #Set the desired mode
    for i in range(10):
        modeSet(mode[0],mode[1])
        time.sleep(0.1)
    print "Mode set to: ", mode
    #Arm the quad
    armQuad(armVar)
    print "System Arm Status: ", armVar


def position_callback(GPS_Position_From_Quad):
    #function to get the global position of the quad
    global read_Position
    read_Position = GPS_Position_From_Quad

def local_Pos_Callback(data):
    #Local position data
    global local_Pose
    local_Pose = data

def local_Vel_Callback(data):
    global local_Vel
    local_Vel = data

def collect_Data():
    global exitFlag
    if not exitFlag:
        collectData.collect()
    else:
        sys.exit()


def main():
    global read_Position, local_Pose, local_Vel, exitFlag

    rospy.wait_for_service("/mavros/mission/push")
    pushWaypoints = rospy.ServiceProxy("/mavros/mission/push", WaypointPush)

    rospy.Subscriber("/mavros/global_position/global", NavSatFix, position_callback)
    rospy.Subscriber("/mavros/local_position/pose", PoseStamped, local_Pos_Callback)
    rospy.Subscriber("/mavros/local_position/velocity", TwistStamped, local_Vel_Callback)

    pub_Position = rospy.Publisher("/mavros/setpoint_raw/local", PositionTarget, queue_size = 0)


    #collect velocity data

    exitFlag=False
    t1 = threading.Thread(name='collect_Data', target=collect_Data)
    t1.start()    

    time.sleep(.1)
    #Set home position
    home_Position = read_Position

    travel_Height = 10

    #Assign tuple with maximum allowable altitude
    max_Height = (read_Position.altitude + 50,)
    ground_Level = (read_Position.altitude,)
    print "The home position is: ", home_Position
    
    list_Waypoints = WaypointList()

    posX = local_Pose.pose.position.x
    posY = local_Pose.pose.position.y
    posZ = local_Pose.pose.position.z

    list1 = [None, None]

    list1[0] = (set_Waypoint(posX + .0001, posY, posZ))
    list1[1] = (set_Waypoint(posX + .0001, posY + .0001, posZ))

    list_Waypoints.waypoints = set_Waypoint(posX, posY, posZ + 50)

    
    pushWaypoints(list1[0])

    #Set mode variable to OFFBOARD
    mode_List = [0, "Auto.Mission"]
    #Call function to set mode and arm motor
    quad_Command(mode_List, True)

    time.sleep(30)

    print "Loitering"
    #Change mode to LOITER so that the quadrotor maintains its final position.
    rospy.wait_for_service("mavros/set_mode")
    modeSet = rospy.ServiceProxy("mavros/set_mode", SetMode)

    modeSet(0, "AUTO.LOITER")
    time.sleep(5)
    exitFlag=True
    #RTH can be enabled by using the GCS or the RC controller.

#Run the program
if __name__ == "__main__":
    main()
