import rospy
from geometry_msgs.msg import PoseStamped, TwistStamped
from mavros_msgs.srv import CommandBool, SetMode, StreamRate
from mavros_msgs.msg import PositionTarget
from sensor_msgs.msg import NavSatFix
import time
import sys
import numpy
import threading

from fnxnsForRaw import set_Local_Waypoint

rospy.init_node("send_Waypoints")

rospy.wait_for_service("mavros/set_stream_rate")
setRate = rospy.ServiceProxy("mavros/set_stream_rate", StreamRate)

#Set rate at 50 Hz
setRate(0, 50, 1)
rospy.Rate(50.0)

global local_Pose, local_Vel, exitFlag#, read_Position

exitFlag = 0

def quad_Command(mode, armVar = False):
    rospy.wait_for_service("mavros/cmd/arming")
    armQuad = rospy.ServiceProxy("mavros/cmd/arming", CommandBool)
    rospy.wait_for_service("mavros/set_mode")
    modeSet = rospy.ServiceProxy("mavros/set_mode", SetMode) 

    #Set the desired mode
    for i in range(10):
        modeSet(mode[0],mode[1])
        time.sleep(0.1)
    print "Mode set to: ", mode
    #Arm the quad
    armQuad(armVar)
    print "System Arm Status: ", armVar


def local_Pos_Callback(data):
    #Local position data
    global local_Pose
    local_Pose = data

def local_Vel_Callback(data):
    global local_Vel
    local_Vel = data


def emergency_Loiter():
    global exitFlag
    rospy.wait_for_service("mavros/set_mode")
    modeSet = rospy.ServiceProxy("mavros/set_mode", SetMode)

    raw_input("Press enter twice to Loiter")
    raw_input("Press enter once to quit Loiter")

    exitFlag = 1

    modeSet(0, "AUTO.LOITER")

    time.sleep(5)


def main():
    global local_Pose, local_Vel#, read_Position
    #Use ENU coords

    #allow loiter mode to be enabled by pressing the enter key twice
    loiterThread = threading.Thread(name='emergency_Loiter', target=emergency_Loiter)
    loiterThread.start()

    #rospy.Subscriber("/mavros/global_position/global", NavSatFix, position_callback)
    rospy.Subscriber("/dGPS/Position", PoseStamped, local_Pos_Callback)
    rospy.Subscriber("/dGPS/Velocity", TwistStamped, local_Vel_Callback)

    #allow mode change to LOITER so that the quadrotor maintains its final position.
    rospy.wait_for_service("mavros/set_mode")
    modeSet = rospy.ServiceProxy("mavros/set_mode", SetMode)

    pub_Position = rospy.Publisher("/mavros/setpoint_raw/local", PositionTarget, queue_size = 0)
    
    time.sleep(.1)

    list_Heights = []
    list_Norths = []
    list_Easts = []

    while len(list_Heights) < 10:
        time.sleep(0.11)
        if local_Pose.header.frame_id==1 and local_Pose.pose.position.z  != list_Heights[len(list_Heights)-1]:
            list_Heights.append(local_Pose.pose.position.z)
            list_Norths.append(local_Pose.pose.position.y)
            list_Easts.append(local_Pose.pose.position.x)

        else:
            print "Non-Fixed or non unique solution.  Waiting for fix"
            list_Heights = []
            list_Norths = []
            list_Easts = []


    #Set home position
    home_Position = PoseStamped()
    home_Position.pose.position.z = numpy.mean(list_Heights)
    home_Position.pose.position.y = numpy.mean(list_Norths)
    home_Position.pose.position.x = numpy.mean(list_Easts)

    travel_Height = 20
    max_North = 130

    #Assign tuple with maximum allowable altitude
    ground_Level = (home_Position.pose.position.z,)
    print "The home position is: ", home_Position


    #Display takeoff waypoint to user for 1 second
    takeoff_Waypoint = set_Local_Waypoint(0,0,travel_Height,0,0,2, 0)
    print takeoff_Waypoint
    time.sleep(1)

    #Waypoint has to be sent to FCU before mode can be changed to OFFBOARD.
    i = 0
    while i < 100:
        takeoff_Waypoint = set_Local_Waypoint(0,0,travel_Height,0,0,2, 0)
        pub_Position.publish(takeoff_Waypoint)
        time.sleep(0.01)
        i = i + 1
        print i

    #Set mode variable to OFFBOARD
    mode_List = [0, "OFFBOARD"]
    #Call function to set mode and arm motor
    quad_Command(mode_List, True)

    #take off to requested height




    #ADD CHECKS FOR FIXED SIGNAL

    while (local_Pose.pose.position.z-ground_Level[0]) < .95 * travel_Height or (local_Pose.pose.position.z - ground_Level[0]) > 1.05*travel_Height:

        if local_Pose.header.frame_id ==1:
            if exitFlag == 0:
                modeSet(0, "OFFBOARD")
                time.sleep(0.1)
            else:
                time.sleep(3)
                sys.exit()

            takeoff_Waypoint = set_Local_Waypoint(0,0,travel_Height,0,0,2, 0)
            pub_Position.publish(takeoff_Waypoint)
            time.sleep(0.2)
            height = local_Pose.pose.position.z - ground_Level[0]
            print "Taking off.  The height is: ", height

        else:
            print "Lost fixed connection"
            modeSet(0, "AUTO.LOITER")
            time.sleep(0.2)
    
    print "The desired height has been reached: ", local_Pose.pose.position.z - ground_Level[0]
    time.sleep(0.4)






    #Set first waypoint and send to quadrotor at 10 Hz
    time0 = time.time()

    #fly for 15 seconds to build up speed
    #while abs(local_Vel.twist.linear.x) < 6.5 and time.time() - time0 < 10:
    while time.time() - time0 < 15:
        first_Waypoint = set_Local_Waypoint(0,max_North,travel_Height, 0, 8, 0, 0)
        pub_Position.publish(first_Waypoint)
        time.sleep(0.1)
        print "Distance North of home.", local_Pose.pose.position.y - home_Position.pose.position.y



    time1 = time.time()

    #check to allow turn.  if none, don't turn.  it !none, turn
    north_Pos = None

    while time.time() - time1 < 5:
        #Commented due to faulty dGPS data
        #desired_North = local_Pose.pose.position.x - home_Position.pose.position.x + 10


        if local_Pose.header.frame_id == 1:
            north_Pos = local_Pose.pose.position.y - home_Position.pose.position.y
            print "Fixed RTK solution.  Turning enabled!!"
            break

        else:
            first_Waypoint = set_Local_Waypoint(0,max_North,travel_Height, 0, 8, 0, 0)
            pub_Position.publish(first_Waypoint)
            time.sleep(0.1)
            print "Distance North of home.", local_Pose.pose.position.y - home_Position.pose.position.y
   



    #if frame_id == 1, execute turn.  Otherwise, go to loiter mode and exit the program.
    #north_Pos will have a numerical value if the turn should be executed

    if north_Pos == None:
        print "Turn failed.  Execute RTL"
        modeSet(0, "AUTO.LOITER")
        time.sleep(5)
        sys.exit()
        #RTH can be enabled by using the GCS or the RC controller.

    else:
        desired_East = 15
        turn_Waypoint = set_Local_Waypoint(desired_East, north_Pos, travel_Height, 8, 0, 0, 0)
        pub_Position.publish(turn_Waypoint)
        time.sleep(0.1)


    time2 = time.time()
    while time.time() - time2 < 12:
        desired_East = desired_East + 0.75
        turn_Waypoint = set_Local_Waypoint(desired_East, north_Pos, travel_Height, 8, 0, 0, 0)
        pub_Position.publish(turn_Waypoint)
        time.sleep(0.1)
        print "Distance East: ", local_Pose.pose.position.x

    modeSet(0, "AUTO.LOITER")
    time.sleep(5)


#Run the program
if __name__ == "__main__":
    main()
